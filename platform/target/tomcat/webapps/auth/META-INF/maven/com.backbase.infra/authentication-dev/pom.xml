<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.backbase.buildingblocks</groupId>
        <artifactId>authentication-external-jwt-service-spring-boot-starter-parent</artifactId>
        <version>2.21.0</version>
        <relativePath />
    </parent>

    <groupId>com.backbase.infra</groupId>
    <artifactId>authentication-dev</artifactId>
    <name>Backbase :: Authentication :: Service :: Development</name>
    <version>1.17.0</version>
    <packaging>jar</packaging>

    <organization>
        <name>Backbase B.V.</name>
        <url>http://www.backbase.com</url>
    </organization>

    <description>Development Authentication Spring Boot service configured to use JWT</description>

    <scm>
        <developerConnection>scm:git:ssh://git@stash.backbase.com:7999/plat/authentication-dev.git</developerConnection>
        <tag>authentication-dev-1.17.0</tag>
    </scm>

    <distributionManagement>
        <repository>
            <id>Backbase Artifact Builds Repository</id>
            <name>artifacts.backbase.com-builds</name>
            <url>https://artifacts.backbase.com/staging</url>
        </repository>
        <snapshotRepository>
            <id>Backbase Artifact Builds Repository</id>
            <name>artifacts.backbase.com-builds</name>
            <url>http://artifacts.backbase.com/backbase-development-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <properties>
        <rest-assured.version>4.0.0</rest-assured.version>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <coverage.reports.dir>${project.build.directory}/site</coverage.reports.dir>
        <sonar.jacoco.reportPaths>${coverage.reports.dir}/jacoco.exec,${coverage.reports.dir}/jacoco-it.exec</sonar.jacoco.reportPaths>
        <sonar.coverage.jacoco.xmlReportPaths>target/site/jacoco-ut/jacoco.xml,target/site/jacoco-it/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
        <sonar.sources>src/main/java,pom.xml</sonar.sources>
        <sonar.java.binaries>${project.build.directory}/classes/</sonar.java.binaries>
        <sonar.tests>${project.basedir}/src/test/</sonar.tests>
        <sonar.skip>false</sonar.skip>

        <!-- docker images -->
        <jib-maven-plugin.version>2.5.2</jib-maven-plugin.version>

        <!-- custom properties -->
        <docker.repo.url>harbor.backbase.eu</docker.repo.url>
        <docker.repo.project>experimental</docker.repo.project>
        <docker.distroless.skip>false</docker.distroless.skip>

        <!-- jib preset properties -->
        <jib.from.image>gcr.io/distroless/java:11</jib.from.image>
        <jib.to.image>${docker.repo.url}/${docker.repo.project}/${project.artifactId}</jib.to.image>
        <jib.to.tags>${project.version},latest</jib.to.tags>
        <jib.container.creationTime>USE_CURRENT_TIMESTAMP</jib.container.creationTime>
        <jib.container.ports>8080</jib.container.ports>
        <jib.console>plain</jib.console>

        <!-- build version override -->
        <build.version>${project.version}</build.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-jetty</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-el</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jetty</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>3.1.6</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <!-- Generate a typical web application -->
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>war</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <attachClasses>true</attachClasses>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <archive>
                        <manifestEntries>
                            <Implementation-Version>${build.version}</Implementation-Version>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <!-- Generate a bootable Spring Boot jar -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>build-info</id>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                        <phase>process-resources</phase>
                        <configuration>
                            <additionalProperties>
                                <version>${build.version}</version>
                            </additionalProperties>
                        </configuration>
                    </execution>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <executable>true</executable>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Publish both jar and war artifacts -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>attach-artifact</goal>
                        </goals>
                        <configuration>
                            <artifacts>
                                <artifact>
                                    <file>${project.build.directory}/${artifactId}.war</file>
                                    <type>war</type>
                                </artifact>
                            </artifacts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>3.5.0.1254</version>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.7.6.201602180812</version>
                <executions>
                    <execution>
                        <id>pre-unit-test</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${coverage.reports.dir}/jacoco.exec</destFile>
                            <propertyName>surefireArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!-- Ensures that the code coverage report for unit tests is created after unit tests have been run. -->
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the output directory for the code coverage report. -->
                            <dataFile>${coverage.reports.dir}/jacoco.exec</dataFile>
                            <outputDirectory>${coverage.reports.dir}/jacoco-ut</outputDirectory>
                        </configuration>
                    </execution>
					          <execution>
					          	  <id>pre-integration-test</id>
					          	  <phase>pre-integration-test</phase>
					          	  <goals>
					          	  	  <goal>prepare-agent</goal>
					          	  </goals>
					          	  <configuration>
					          	  	  <!-- Sets the path to the file which contains the execution data. -->
					          	  	  <destFile>${coverage.reports.dir}/jacoco-it.exec</destFile>
					          	  	  <propertyName>failsafeArgLine</propertyName>
					          	  </configuration>
					          </execution>
					          <execution>
					          	  <id>post-integration-test</id>
					          	  <phase>post-integration-test</phase>
					          	  <goals>
					          	  	  <goal>report</goal>
					          	  </goals>
					          	  <configuration>
					          	  	  <!-- Sets the output directory for the code coverage report. -->
					          	  	  <dataFile>${coverage.reports.dir}/jacoco-it.exec</dataFile>
					          	  	  <outputDirectory>${coverage.reports.dir}/jacoco-it</outputDirectory>
					          	  </configuration>
					          </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18</version>
                <configuration>
                    <!-- Sets the VM argument line used when unit tests are run -->
                    <argLine>${surefireArgLine}</argLine>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <!-- Sets the VM argument line used when integration tests are run -->
                    <argLine>${failsafeArgLine}</argLine>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.3</version>
            </plugin>

            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>${jib-maven-plugin.version}</version>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>docker-image</id>

            <dependencies>

                <!-- add cloud stream binders -->
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-stream-binder-rabbit</artifactId>
                    <version>3.0.1.RELEASE</version>
                </dependency>

                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-stream-binder-kafka</artifactId>
                    <version>3.0.1.RELEASE</version>
                </dependency>

                <!-- add embedded tomcat -->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <!-- build image -->
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>distroless-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <skip>${docker.distroless.skip}</skip>
                                    <container>
                                        <user>nonroot:nonroot</user>
                                        <workingDirectory>/home/nonroot</workingDirectory>
                                    </container>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>